// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  return array.reduce(function(accumulator, current){
    return accumulator.concat(current);
    }, []);

}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  for (var i = value; test(i); i = update(i)){
    body(i);
  }

}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(arr, func) {
  for (var element of arr){
    if (!func(element)) return false;
  }
  return true;

}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {
  
   var arrLit1 = [];
   
   var arrLit2 = [];
 
   //loop string
   for(let i = 0; i < string.length; i++){
     //create script and assign it the result of invoking characterScript on the characters char code
     let script = characterScript(string.charCodeAt(i));
 
     //determing if script is not equal to null
     if(script !== null){
       if(script.direction === 'arrLit1'){
         ltr.push(script);//if script direction is arrLit1, push to arrLit1
       } else{
         arrLit2.push(script);//else push to arrLit2
       }
     }
   }
   
   if(arrLit1.length > arrLit2.length){
     return 'arrLit1';
   } else{
     return 'arrLit2';
   }

}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
